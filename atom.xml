<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>听雨煎茶</title>
  
  
  <link href="https://staray.github.io/atom.xml" rel="self"/>
  
  <link href="https://staray.github.io/"/>
  <updated>2023-04-19T06:45:18.161Z</updated>
  <id>https://staray.github.io/</id>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Github API</title>
    <link href="https://staray.github.io/2023/04/19/Github-API/"/>
    <id>https://staray.github.io/2023/04/19/Github-API/</id>
    <published>2023-04-19T01:25:31.000Z</published>
    <updated>2023-04-19T06:45:18.161Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在使用Github作为远端仓库的时候，Github给我们提供了一套API接口，可以做非常多有趣的事，今天尝试使用其中的API来操作仓库文件，达到一个免费“数据库”的作用。</p><p>具体描述：</p><ol><li>创建Github仓库，并传入一个文件作为“数据库”。</li><li>创建Token，用于访问和操作“数据库”</li><li>在安卓端，使用该Token，对“数据库”进行读写操作。</li></ol><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><blockquote><p>在开始之前，请先确保已经申请Github账号和配置好本地Git环境，并具备基本的Git操作知识。如果还未接触过Git请先尝试学习一下简单教程。</p></blockquote><h2 id="一、-创建仓库"><a href="#一、-创建仓库" class="headerlink" title="一、 创建仓库"></a>一、 创建仓库</h2><p>在Github页面创建一个公开仓库，起个名字比如：<code>APITest</code>:</p><p><img src="http://pic.staray.top/Github-API/QQ%E6%88%AA%E5%9B%BE20230419093847.png" alt="image"></p><p>本地创建一个新文件夹，创建两个文件<code>data.json</code>和<code>README.md</code>。<br>其中<code>data.json</code>就作为“数据库”文件使用，编辑此文件随便写点什么：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;key1&quot;: &quot;value1&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，在本地建立仓库，并push到Github远端仓库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git add . --all</span><br><span class="line">git commit -m &quot;init&quot;</span><br><span class="line">git remote add origin git@github.com:Staray/APITest.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p>至此仓库准备完毕</p><h2 id="二、-验证接口"><a href="#二、-验证接口" class="headerlink" title="二、 验证接口"></a>二、 验证接口</h2><p>Github给我们提供了访问仓库文件的接口，测试下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://api.github.com/repos/Staray/APITest/contents/data.json</span><br></pre></td></tr></table></figure><p>返回结果：</p><p><img src="http://pic.staray.top/Github-API/api-data-json.png" alt="获取文件"></p><p>分析下这个接口：<br>前面的<code>https://api.github.com/repos/</code>是固定的，接着<code>Staray</code>是我的Github账户名，<code>APITest</code>是刚刚创建的仓库名称，<code>contents</code>是固定格式，<code>data.json</code>是刚刚创建的文件名称，所以通用的格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://api.github.com/repos/[用户名]/[仓库名]/contents/[文件名]</span><br></pre></td></tr></table></figure><blockquote><p>注意，这个地址一定要注意大小写！</p></blockquote><p>这个json结构数据，包含了这个文件的一些关键性信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;data.json&quot;,</span><br><span class="line">  &quot;path&quot;: &quot;data.json&quot;,</span><br><span class="line">  &quot;sha&quot;: &quot;1cdefd0d8236a42053cbc83945180258d9cdaded&quot;,</span><br><span class="line">  &quot;size&quot;: 22,</span><br><span class="line">  &quot;url&quot;: &quot;https://api.github.com/repos/Staray/APITest/contents/data.json?ref=master&quot;,</span><br><span class="line">  &quot;html_url&quot;: &quot;https://github.com/Staray/APITest/blob/master/data.json&quot;,</span><br><span class="line">  &quot;git_url&quot;: &quot;https://api.github.com/repos/Staray/APITest/git/blobs/1cdefd0d8236a42053cbc83945180258d9cdaded&quot;,</span><br><span class="line">  &quot;download_url&quot;: &quot;https://raw.githubusercontent.com/Staray/APITest/master/data.json&quot;,</span><br><span class="line">  &quot;type&quot;: &quot;file&quot;,</span><br><span class="line">  &quot;content&quot;: &quot;ewogICJrZXkxIjogInZhbHVlMSIKfQ==\n&quot;,</span><br><span class="line">  &quot;encoding&quot;: &quot;base64&quot;,</span><br><span class="line">  &quot;_links&quot;: &#123;</span><br><span class="line">    &quot;self&quot;: &quot;https://api.github.com/repos/Staray/APITest/contents/data.json?ref=master&quot;,</span><br><span class="line">    &quot;git&quot;: &quot;https://api.github.com/repos/Staray/APITest/git/blobs/1cdefd0d8236a42053cbc83945180258d9cdaded&quot;,</span><br><span class="line">    &quot;html&quot;: &quot;https://github.com/Staray/APITest/blob/master/data.json&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的就是这个key：<code>sha</code>，每个仓库文件，都有对应的哈希值，如果修改该文件，哈希值就会变化，这个值是后面我们更新文件的唯一标识。<br>第二个需要注意的就是<code>content</code>，这个值记录的是文件内容的<code>Base64</code>编码结果，你可以直接通过<code>Base64解码</code>来获取到文件的内容。<br>第三个<code>download_url</code>，尝试访问这个地址，你就会直接拿到文件内容，如下所示：<br><img src="http://pic.staray.top/Github-API/raw-data-json.png" alt="raw-data-json"></p><p>其他更多接口使用查看：<br><a href="https://www.jianshu.com/p/a6779929fad2">https://www.jianshu.com/p/a6779929fad2</a></p><h2 id="三、-TOKEN申请"><a href="#三、-TOKEN申请" class="headerlink" title="三、 TOKEN申请"></a>三、 TOKEN申请</h2><p>上面的文档中给出了多种认证方式：</p><blockquote><p>认证方法一：Basic authentication<br>认证方法二：OAuth2 token<br>认证方法三：OAuth2 key/secret</p></blockquote><p>根据我们要实现的功能，最合适的是TOKEN验证。</p><p>在Github页面，打开Setting页面：</p><p><img src="http://pic.staray.top/Github-API/setting-btn.png" alt="setting"></p><p>找到<code> Developer settings</code>选项卡点击打开，进入<code>Token页面</code></p><p><img src="http://pic.staray.top/Github-API/token-page.png" alt="Token Page"></p><p>点击<code>Generate new token</code>，在下拉框中选择<code>Generate new token(classic)</code>，创建一个新的Token。</p><p>在创建页面，输入Note，设置期限，可以设置无过期，然后根据权限勾选token能操作的接口，这里我们需要操作仓库，至少要把repo勾选上：<br><img src="http://pic.staray.top/Github-API/gen-token.png" alt="Gen token"></p><p>然后，点击下方的<code>Generate token</code>按钮。</p><p>就能看到生成的Token页面，注意，这个页面只有在这时显示一次，以后就再也看不到这个Token明文了，所以需要这时保存下来，然后一直使用，假如没有保存，重新执行上面的生成token步骤进行替换即可。</p><p><img src="http://pic.staray.top/Github-API/token-content.png" alt="Token Content"></p><h2 id="四、-修改文件测试"><a href="#四、-修改文件测试" class="headerlink" title="四、 修改文件测试"></a>四、 修改文件测试</h2><p>下面介绍在安卓项目中修改仓库文件的实际测试，可以使用任何其他网络访问方式进行替换，比如在windows上使用Curl工具，PostMan工具等，原理都是一样。</p><p>比如使用Ok-go库进行网络访问，设置Header：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HttpHeaders headers = new HttpHeaders();</span><br><span class="line">headers.put(&quot;Authorization&quot;, &quot;token ghp_xxxxxxxxxxxxxxxxxxxxxx&quot;);</span><br><span class="line">OkGo.getInstance().init(this)</span><br><span class="line">.addCommonHeaders(headers);</span><br></pre></td></tr></table></figure><p>代码里的token后面的内容使用申请的Token字符串进行替换。</p><p>然后，重点来了，修改文件内容需要以下操作，直接上代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import android.util.Base64;</span><br><span class="line"></span><br><span class="line">String json = &quot;&#123;\&quot;key1\&quot;: \&quot;value2\&quot;&#125;&quot;;</span><br><span class="line">String base64Data = Base64.encodeToString(json.getBytes(StandardCharsets.UTF_8), Base64.DEFAULT);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">* 上传数据格式：</span><br><span class="line">* &#123;</span><br><span class="line">*   &quot;message&quot;: &quot;test&quot;,</span><br><span class="line">*   &quot;content&quot;:</span><br><span class="line">*   &quot;Y3JlYXRlIxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;,</span><br><span class="line">*   &quot;sha&quot;: &quot;5xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;</span><br><span class="line">* &#125;</span><br><span class="line">*/</span><br><span class="line">JSONObject json = new JSONObject();</span><br><span class="line">json.put(&quot;message&quot;, &quot;test&quot;);</span><br><span class="line">json.put(&quot;content&quot;, base64Data);</span><br><span class="line">// shaStr，就是上面提到的文件哈希值。</span><br><span class="line">json.put(&quot;sha&quot;, shaStr);</span><br><span class="line"></span><br><span class="line">// 这个地址就是上面获取文件信息的地址，使用PUT方式进行文件更改</span><br><span class="line">OkGo.&lt;String&gt;put(&quot;https://api.github.com/repos/Staray/APITest/contents/data.json&quot;)</span><br><span class="line">    .upJson(json)</span><br><span class="line">    .execute(new StringCallback() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void onSuccess(Response&lt;String&gt; response) &#123;</span><br><span class="line">            Log.e(&quot;TAG&quot;, &quot;success:&quot; + response.body());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>可以实际看到文件内容就被更改了:<br><img src="http://pic.staray.top/Github-API/put-result.png" alt="put-result"></p><p>再次访问Github API接口：</p><p><img src="http://pic.staray.top/Github-API/put-data-result.png" alt="put-data-result"></p><p>可以看到文件内容更改成功。</p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>有了这个接口，我们就可以实现一些简单的数据存储，这里使用的明文，可以进行加密处理，这样我们就可以在没有个人服务器的情况下，使用远端数据存储和同步数据了。</p><hr><div height="200px"></div><center><font color="#32CD32">天街小雨润如酥，草色遥看近却无</font></center>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在使用Github作为远端仓库的时候，Github给我们提供了一套API接口，可以做非常多有趣的事，今天尝试使用其中的API来操作仓库文件，</summary>
      
    
    
    
    <category term="技术文章" scheme="https://staray.github.io/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/"/>
    
    
    <category term="Github" scheme="https://staray.github.io/tags/Github/"/>
    
    <category term="API" scheme="https://staray.github.io/tags/API/"/>
    
    <category term="Android" scheme="https://staray.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>字帖</title>
    <link href="https://staray.github.io/2023/04/17/zitie/"/>
    <id>https://staray.github.io/2023/04/17/zitie/</id>
    <published>2023-04-17T03:11:36.000Z</published>
    <updated>2023-04-18T01:51:04.115Z</updated>
    
    <content type="html"><![CDATA[<p>试试字帖：</p><style>    .inline-demo {        border: 1px solid #CCC;        width: 300px;        height: 300px;        margin: 5px;    }    .container {        text-align: center;    }    .h-center-item {        display: inline-block;    }</style><script type="text/javascript" src="hanzi-writer.js"></script><script type="text/javascript" src="https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js"></script><div class="container">    <div class="h-center-item">        <!--米字格-->        <div class="inline-demo">            <svg xmlns="http://www.w3.org/2000/svg" width="300" height="300" id="grid-background-target">                <line x1="0" y1="0" x2="300" y2="300" stroke="#DDD" ></line>                <line x1="300" y1="0" x2="0" y2="300" stroke="#DDD" ></line>                <line x1="150" y1="0" x2="150" y2="300" stroke="#DDD" ></line>                <line x1="0" y1="150" x2="300" y2="150" stroke="#DDD" ></line>            </svg>            <input id="input_edit" style="margin-top: 10px;" value="为"/>            <button id="animate-button">生成</button>        </div>    </div></div><script>    var text = document.getElementById("input_edit").value;    var writer = HanziWriter.create('grid-background-target', text, {        width: 300,        height: 300,        padding: 5,        showOutline: true,        strokeAnimationSpeed: 0.8, // 5x normal speed        delayBetweenStrokes: 1000, // milliseconds        radicalColor: '#337ab7', // blue        charDataLoader: function (char, onComplete) {            $.getJSON("./data/" + char + ".json", function (charData) {                onComplete(charData);            })        }    });    document.getElementById('animate-button').addEventListener('click', function () {        var text = document.getElementById("input_edit").value;        writer.setCharacter(text);        writer.animateCharacter();    });</script>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;试试字帖：&lt;/p&gt;
&lt;style&gt;
    .inline-demo {
        border: 1px solid #CCC;
        width: 300px;
        height: 300px;
        margin: 5px;
  </summary>
      
    
    
    
    
    <category term="字帖" scheme="https://staray.github.io/tags/%E5%AD%97%E5%B8%96/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://staray.github.io/2023/04/12/hello-world/"/>
    <id>https://staray.github.io/2023/04/12/hello-world/</id>
    <published>2023-04-12T08:52:29.608Z</published>
    <updated>2023-04-12T08:49:38.234Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
